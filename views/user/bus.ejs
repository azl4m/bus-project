<%- include("../partials/user/header.ejs") %>

<link rel="stylesheet" href="/styles/bus.css" />
<style>
  /* Modal Background */
  .modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
  }

  /* Modal Content */
  .modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    text-align: center;
    width: 300px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
  }

  /* Close Button */
  .close-btn {
    float: right;
    font-size: 20px;
    cursor: pointer;
  }
</style>
<div class="main-search-container">
  <div class="search-container">
    <h2 class="text-center mb-4">Search For Routes</h2>
    <form action="/search-bus" method="post" id="busForm">
      <div class="position-relative mb-4">
        <div class="mb-3">
          <label class="form-label text-muted">From</label>
          <input
            type="text"
            id="fromInput"
            class="form-control custom-input"
            placeholder="Enter starting point"
            autocomplete="off"
          />
          <input type="hidden" name="fromId" id="fromId" />
          <ul
            id="fromDropdown"
            class="dropdown-menu w-100"
            style="max-height: 200px; overflow-y: auto; display: none"
          ></ul>
        </div>
        <button type="button" class="swap-btn" id="swap-btn">
          <i id="first-arrow" class="fas fa-arrow-up"></i>
          <i id="second-arrow" class="fas fa-arrow-down"></i>
        </button>
        <div class="mb-4">
          <label class="form-label text-muted">To</label>
          <input
            type="text"
            id="toInput"
            class="form-control custom-input"
            placeholder="Enter starting point"
            autocomplete="off"
          />
          <input type="hidden" name="toId" id="toId" />
          <ul
            id="toDropdown"
            class="dropdown-menu w-100"
            style="max-height: 200px; overflow-y: auto; display: none"
          ></ul>
        </div>
      </div>
      <div class="text-center">
        <button type="submit" class="search-btn">Search</button>
      </div>
    </form>
  </div>
</div>
<!-- Modal -->
<div id="noBusModal" class="modal">
  <div class="modal-content">
    <span class="close-btn" onclick="closeModal()">&times;</span>
    <p>No buses found for the selected route. Please try another route!</p>
  </div>
</div>
<script>
             function showModal() {
    document.getElementById("noBusModal").style.display = "flex";
  }

  function closeModal() {
    console.log("inside close modal");
    
    document.getElementById("noBusModal").style.display = "none";
  }
    document.addEventListener("DOMContentLoaded", function () {
        const fromInput = document.getElementById("fromInput");
        const fromDropdown = document.getElementById("fromDropdown");
        const fromId = document.getElementById("fromId")
        let places = <%- JSON.stringify(places) %>;

        fromInput.addEventListener("input", function () {
            let inputValue = this.value.toLowerCase();

            let filteredPlaces = places.filter(p => p.place.toLowerCase().startsWith(inputValue));

            // Sort alphabetically
            filteredPlaces.sort((a, b) => a.place.localeCompare(b.place));

            // Clear dropdown
            fromDropdown.innerHTML = "";

            // Append filtered results
            if (filteredPlaces.length > 0) {
                fromDropdown.style.display = "block";
                filteredPlaces.forEach(p => {
                    let listItem = document.createElement("li");
                    listItem.innerHTML = `<a href="#" class="dropdown-item">${p.place}</a>`;

                    listItem.addEventListener("click", function (e) {
                        e.preventDefault();
                        fromInput.value = p.place;
                        fromId.value = p._id
                        fromDropdown.style.display = "none";
                    });

                    fromDropdown.appendChild(listItem);
                });
            } else {
                fromDropdown.style.display = "none";
            }
        });

        // Hide dropdown when clicking outside
        document.addEventListener("click", function (e) {
            if (!fromInput.contains(e.target) && !fromDropdown.contains(e.target)) {
                fromDropdown.style.display = "none";
            }
        });
    });
    document.addEventListener("DOMContentLoaded", function () {
        const toInput = document.getElementById("toInput");
        const toDropdown = document.getElementById("toDropdown");
        const toId = document.getElementById("toId")
        let places = <%- JSON.stringify(places) %>;

        toInput.addEventListener("input", function () {
            let inputValue = this.value.toLowerCase();

            let filteredPlaces = places.filter(p => p.place.toLowerCase().startsWith(inputValue));

            // Sort alphabetically
            filteredPlaces.sort((a, b) => a.place.localeCompare(b.place));

            // Clear dropdown
            toDropdown.innerHTML = "";

            // Append filtered results
            if (filteredPlaces.length > 0) {
                toDropdown.style.display = "block";
                filteredPlaces.forEach(p => {
                    let listItem = document.createElement("li");
                    listItem.innerHTML = `<a href="#" class="dropdown-item">${p.place}</a>`;

                    listItem.addEventListener("click", function (e) {
                        e.preventDefault();
                        toInput.value = p.place;
                        toId.value = p._id
                        toDropdown.style.display = "none";
                    });

                    toDropdown.appendChild(listItem);
                });
            } else {
                toDropdown.style.display = "none";
            }
        });

        // Hide dropdown when clicking outside
        document.addEventListener("click", function (e) {
            if (!toInput.contains(e.target) && !toDropdown.contains(e.target)) {
                toDropdown.style.display = "none";
            }
        });
      });
      document.addEventListener("DOMContentLoaded",function(){
          const swapBtn = document.getElementById("swap-btn")
          const fromId = document.getElementById("fromId")
          const toId = document.getElementById("toId")



          const fromInput = document.getElementById("fromInput");
          const toInput = document.getElementById("toInput");
          const firstArrow = document.getElementById("first-arrow")
          const secondArrow = document.getElementById("second-arrow")
          swapBtn.addEventListener("click",function (){
              [fromId.value,toId.value] = [toId.value,fromId.value];
              [fromInput.value,toInput.value] = [toInput.value,fromInput.value];
              if(firstArrow.classList.contains("fa-arrow-up")){
                  firstArrow.classList.remove("fa-arrow-up")
                  firstArrow.classList.add("fa-arrow-down")
                  secondArrow.classList.remove("fa-arrow-down")
                  secondArrow.classList.add("fa-arrow-up")
              }else{
                  firstArrow.classList.add("fa-arrow-up")
                  firstArrow.classList.remove("fa-arrow-down")
                  secondArrow.classList.add("fa-arrow-down")
                  secondArrow.classList.remove("fa-arrow-up")
              }
          })
 

  // Close modal when clicking outside it
  window.onclick = function (event) {
    let modal = document.getElementById("noBusModal");
    if (event.target === modal) {
      closeModal();
    }
  };
          const form = document.getElementById("busForm")
          const data = {fromId:fromId.value,toId:toId.value}
          console.log(fromId);

          form.addEventListener("submit",async function(event){
            console.log(fromId.value);
          console.log(toId.value);
            event.preventDefault()
              const response = await fetch("/check-bus-search",{
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body:JSON.stringify({
                    fromId:fromId.value,toId:toId.value
                  })
              })
              const result = await response.json()
              if(!response.ok){
                  showModal()
              }else{
                console.log("Form is valid, submitting...");
                this.submit()
              }
          })
      })
</script>
<%- include("../partials/user/footer.ejs") %>
